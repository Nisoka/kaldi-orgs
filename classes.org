* Graphviz

  dot 语法总结
  http://blog.csdn.net/zouhust/article/details/50317949
  http://blog.csdn.net/stormdpzh/article/details/14648827
  dot 实例
  https://www.jianshu.com/p/e44885a777f0


* DiagGmm
  DiagGmm 代表混合高斯模型 是一个聚类后状态的pdf-class

  DiagGmmNormal
  代表一个GMM模型对象, 一个GMM模型是一个HMM状态的模型 pdf-- 概率分布函数(由 MFCC --> 状态概率).
  GMM 模型参数 包括 
  1 weight 高斯模型分量权重 n个分量
  2 高斯模型均值means x n
  3 高斯模型协方差vars x n

  DiagGmmNormal完整描述一个GMM模型 即一个状态(绑定不绑定都可以)的模型.
  
  DiagGmm 为了计算方便,kaldi 使用DiagGmm 表示简单处理的DiagGmmNormal [1]
  保存的并不是原原本本的均值、方差，
  1 weight 高斯模型分量权重 n个分量
  2 方差每一元素求倒数后的inv_vars_
  3 均值乘以inv_vars_后的means_invvars_

** GMM 参数
  高斯分布，是一个以均值 方差为参数的函数。
  所以一个模型是高斯分布, 则其分布函数就可以通过均值u 和 delta描述.
  当高斯分布描述的随机变量是多维时,得到多维高斯分布, 这时候描述该分布的参数
  就是多维均值以及多维变量的协方差矩阵 因为协方差矩阵是对角的一般叫做Diag。
  
  GMM 是一个混合多维高斯分布
  Kaldi中使用DiagGmmNormal描述一个状态的GMM pdf(概率分布函数), 
  保存的就是多维均值 以及 协方差矩阵.
  而一般为了计算使用方面 一般使用的是 DiagGmm, 是为了后续计算进行了
  多维均值 以及协方差处理计算过的inv_vars_ mean_invvas_的.[1]

  [1]
  Kaldi单音素GMM学习笔记---
  http://blog.csdn.net/u010731824/article/details/69668765

  多维高斯分布由一维演进过程
  https://www.zhihu.com/question/36339816/answer/67439742
  方差矩阵
  http://blog.csdn.net/beechina/article/details/51074750  
  多维度高斯分布
  http://blog.csdn.net/cuihuijun1hao/article/details/71307166
  详解
  http://www.doc88.com/p-373366287206.html


  
** 核心成员
  /// Equals log(weight) - 0.5 * (log det(var) + mean*mean*inv(var))
  gconsts_是一个拟合用系数, 具体就是
  Vector<BaseFloat> gconsts_;
  bool valid_gconsts_;   ///< Recompute gconsts_ if false
  // 

  各个分模型权重
  Vector<BaseFloat> weights_;        ///< weights (not log).

  各分模型的转置协方差 均值*inv_vars
  Matrix<BaseFloat> inv_vars_;       ///< Inverted (diagonal) variances
  Matrix<BaseFloat> means_invvars_;  ///< Means times inverted variance






* HmmTopology
  HmmTopology HT 
      表示一个音素-状态的HMM拓扑结构, 只描述了音素内 状态结构以及转移的初始拓扑结构,
      但并没有描述一个HMM模型的观测生成概率, 只具有初始化能力.

      <TopoEntry> 是一个音素的拓扑结构
      提供了音素内状态结构以及初始的状态转移概率A  
      整个HMMTopology 没有提供状态的观测生成概率B

  HmmTopology 
      1 包含了所有音素，保存到类内phones_中，对应topo文件中所有<Forphones>描述了的音素
      2 每个音素的HMM状态拓扑结构 由phone2idx_和entries_ 共同决定 对应为<TopologyEntry>
        phone2idx 表明某个音素的拓扑结构在哪个entries_中.
        entries_ 所有的音素的HMM状态结构 vector<TopologyEntry>
        TopologyEntry 描述了一个音素的HMM状态拓扑结构 vector<HmmState>
        HmmState 描述音素内状态的转移概率 A。 vector<pair<int32, BaseFloat>>.
        pair<目标状态, 转移概率>
        

  TransitionModel TM
      kaldi中使用TM描述一个完整HMM模型，包含了HMM拓扑结构HT, 
      提供了状态转移概率A <logprobs>
          可以使用其他工具详细查看Transition概率
      提供了观测生成概率B 高斯模型参数 <Diagmm>
          每个状态的GMM模型.


** 核心成员 phones_ phone2idx_ entries_
std::vector<int32> phones_;  // list of all phones we have topology for.  Sorted, uniq.  no epsilon (zero) phone.
std::vector<int32> phone2idx_;  // map from phones to indexes into the entries vector (or -1 for not present).
std::vector<TopologyEntry> entries_; 所有可能的 音素-state 拓扑结构。

phone2idx_ 
    以 phone-id为索引, 以phone-id对应的TopologyEntry索引 为值.
entries_
    使用phone2idx_数组来索引某个音素的对应 TopologyEntry.  entries_[phone2idx_[phone]]

TopologyForphone(phone);
    return entries_[phone2idx_[phone]]
    返回音素对应的音素-状态拓扑结构.

int32 NumPdfClass(int32 phone);
    TopologyForphone(phone);
    返回的是 phone对应的TopologyEntry 音素-状态拓扑结构中所有状态pdf-class最大值。


** typedef std::vector<HmmState> TopologyEntry;
   描述 某个音素的HmmState拓扑结构.

   const HmmTopology::TopologyEntry& HmmTopology::TopologyForPhone(int32 phone) const {  // Will throw if phone not covered.
     if (static_cast<size_t>(phone) >= phone2idx_.size() || phone2idx_[phone] == -1) {
       KALDI_ERR << "TopologyForPhone(), phone "<<(phone)<<" not covered.";
     }

     return entries_[phone2idx_[phone]];
   }
   
   返回某个音素phone TopologyEntry结构所有state中pdf-class最大值.
   int32 HmmTopology::NumPdfClasses(int32 phone) const {
     // will throw if phone not covered.
     const TopologyEntry &entry = TopologyForPhone(phone);
     int32 max_pdf_class = 0;
     for (size_t i = 0; i < entry.size(); i++) {
       max_pdf_class = std::max(max_pdf_class, entry[i].forward_pdf_class);
       max_pdf_class = std::max(max_pdf_class, entry[i].self_loop_pdf_class);
     }
     return max_pdf_class+1;
   }










* EventMap & EventType
  上下文音素下的某个状态 认为能够确定一个状态 确定状态.

  EventType typedef std::vector<std::pair<EventKeyType, EventValueType> > EventType;
      是键值对的向量, 在kaldi中用来完全描述一个状态.
      通过EventType 可以描述一个确定状态
  EventAnswerType 
      一个确定状态  生成概率GMM的pdf-id.
  EventMap
      讲EventMap描述的一个确定状态 与 状态对应的pdf-id 进行映射.
      应该是要先装载某个决策树, 以决策树为地图, 通过EventType进行定位 EventAnswerType


  eg 
    a/b/c 中 b的第二个状态 s2.
    假设音素a，b和c的整数索引分别为10,11和12。
    
    在KALDI 中用EventType描述确定状态时 
      0，1和2是3音素窗口“a/b/c”中的位置，
      -1是我们用于对状态id进行编码的特殊索引
      (c.f.常量kPdfClass = -1)
         
    表示为排序向量对为：
      EventType e = {{-1,1}，{0,10}，{1,11}，{2,12}};

    假设对应于这种声学状态的声学状态索引（pdf-id）恰好为1000.那么如果我们有一个表示树的EventMap“emap”，那么我们期望以下的断言不会失败：
      EventAnswerType ans;
      bool ret = emap.Map（e，＆ans）; // emap的类型是EventMap; e是EventType
      KALDI_ASSERT（ret == true && ans == 1000）;

 
 
  
  
  
  
  
  



* class ContextDependencyInterface 
  上下文相关结构的虚基类
  从一个上下文相关音素 到 整数叶子节点序列的映射.
  phone-in-context width -- 3 triphone.


* ContextDependency

**  GetPdfInfo()

std::vector<std::vector<std::vector<std::pair<int32, int32> > > > *pdf_info
# 所有pdf-id     音素内pdf-class       <phone, pdf-class> ????

void ContextDependency::GetPdfInfo(
    const std::vector<int32> &phones,
    const std::vector<int32> &num_pdf_classes,  // indexed by phone,
    std::vector<std::vector<std::pair<int32, int32> > > *pdf_info) const {

    # phones 所有音素数组
    # 音素内最大pdf-class
    # 输出参数。

  # 决策树的 定位信息
  EventType vec;
  # 所有pdf-id
  pdf_info->resize(NumPdfs()); 
  for (size_t i = 0 ; i < phones.size(); i++) {
    int32 phone = phones[i];
    vec.clear();
    vec.push_back(std::make_pair(static_cast<EventKeyType>(P_),
                                 static_cast<EventValueType>(phone)));
    
    # Now get length ; max_pdf-class in phone.
    EventAnswerType len = num_pdf_classes[phone];

    # pos 是phone 内的 pdf-class
    for (int32 pos = 0; pos < len; pos++) {
      # vec[0] ---- (0, phone)      
      # vec[1] ---- (-1, pdf-class)
      # mono 训练时 构造的是这样的决策定位, 只用两个坐标.
      vec.resize(2);
      vec[0] = std::make_pair(static_cast<EventKeyType>(P_),
                              static_cast<EventValueType>(phone));

      vec[1] = std::make_pair(kPdfClass, static_cast<EventValueType>(pos));

      
      std::vector<EventAnswerType> pdfs;  // pdfs that can be at this pos as this phone.
      # 从to_pdf_ 对象中映射得到 pdfs ---- pdf-id???, 不同音素也可以得到的相同的pdf-id
      # 一般 pdfs 只有一个元素 就是该 phone, pdf-class 对应的pdf-id.
      to_pdf_->MultiMap(vec, &pdfs);

      for (size_t j = 0; j < pdfs.size(); j++) {
        # <phone, pos>  >> 
        (*pdf_info)[pdfs[j]].push_back(std::make_pair(phone, pos));
      }
    }
  }
}

*** another
void ContextDependency::GetPdfInfo(
    const std::vector<int32> &phones,
    const std::vector<std::vector<std::pair<int32, int32> > > &pdf_class_pairs,
    std::vector<std::vector<std::vector<std::pair<int32, int32> > > > *pdf_info) const {

    # phones 所有音素数组
    # 音素内最大pdf-class
    # 输出参数。

  pdf_info->resize(1 + *std::max_element(phones.begin(), phones.end()));
  # 音素窗
  std::vector<int32> phone_window(N_, -1);
  # 状态坐标(left, center, right, curState).
  EventType vec;

  for (size_t i = 0 ; i < phones.size(); i++) {
    # loop over phones
    int32 phone = phones[i];

    # pdf_class_pairs[phone]  音素内的所有pdf-class.
    (*pdf_info)[phone].resize(pdf_class_pairs[phone].size());
    for (size_t j = 0; j < pdf_class_pairs[phone].size(); j++) {
      // loop over pdf_class pairs
      int32 pdf_class = pdf_class_pairs[phone][j].first,
            self_loop_pdf_class = pdf_class_pairs[phone][j].second;
      phone_window[P_] = phone;

      unordered_set<std::pair<int32, int32>, PairHasher<int32> > pairs;
      EnumeratePairs(phones, self_loop_pdf_class, pdf_class, phone_window, &pairs);
      unordered_set<std::pair<int32, int32>, PairHasher<int32> >::iterator iter = pairs.begin(),
                           end = pairs.end();
      for (; iter != end; ++iter)
        (*pdf_info)[phone][j].push_back(*iter);
      std::sort( ((*pdf_info)[phone][j]).begin(),  ((*pdf_info)[phone][j]).end());
    }
  }
}



* others
** ParseOptions
   #include <parse-options.h>
   http://kaldi-asr.org/doc/classkaldi_1_1ParseOptions.html
   这个类就是用来 处理命令行选项的.
   egs
   gmm-align --transition-scale=10.0 --beam=75 \
       exp/mono/tree exp/mono/30.mdl data/L.fst \
       'ark:add-deltas --print-args=false scp:data/train.scp ark:- |' \
       ark:data/train.tra ark:exp/tri/0.ali
   其中gmm-align 是命令程序
   
   # 命令行参数 包括
     1 命令行选项 commond-line options
        --trainsition-scale=10.0 --beam=75 等
     2 位置参数 positonal arguments
        剩下的没有 - --描述的参数

   # ParseOptions 使用

     // Initialize the ParseOptions object with the usage string.
     ParseOptions po(usage)
     # 前面先注册可识别的命令行选项.
     // Register the options with the ParseOptions object.
     po.Register("binary", &binary, "Write output in binary mode");
     po.Register("beam", &beam, "Decoding beam");
     gopts.Register(&po);
     # 读取命令行参数，如果命令行参数中有不匹配的命令行选项则直接报错exit
     op.Read(argc, argv);
     # 获取位置参数.
     std::string tree_in_filename = po.GetArg(1);
** pdf-class
   pdf-class的标号（注：如果HMM的每个状态都有对应的pdf，则pdf-class可理解为HMM的第几个状态）。
   一般情况，pdf-class的值与HMM状态的序号是相同的，比如0，1或2



* questions

**  MultiMap 函数
  vec 是一个 上下文相关音素中的某个状态 ---- 确定状态.
  怎么获得的多个pdfs呢???
  # pdfs that can be at this pos as this phone.
  std::vector<EventAnswerType> pdfs;  
  to_pdfs_.MultiMap(EventType vec, pdfs)
