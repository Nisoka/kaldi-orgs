
# steps/nnet3/xconfig_to_configs.py --xconfig-file $dir/configs/network.xconfig --config-dir $dir/configs/


* xconfig-file
  # input dim=100 name=ivector
  # input dim=43 name=input

  # # please note that it is important to have input layer with the name=input
  # # as the layer immediately preceding the fixed-affine-layer to enable
  # # the use of short notation for the descriptor
  # fixed-affine-layer name=lda input=Append(-2,-1,0,1,2,ReplaceIndex(ivector, t, 0)) affine-transform-file=$dir/configs/lda.mat

  # # the first splicing is moved before the lda layer, so no splicing here
  # relu-batchnorm-layer name=tdnn1 dim=850
  # relu-batchnorm-layer name=tdnn2 dim=850 input=Append(-1,0,2)
  # relu-batchnorm-layer name=tdnn3 dim=850 input=Append(-3,0,3)
  # relu-batchnorm-layer name=tdnn4 dim=850 input=Append(-7,0,2)
  # relu-batchnorm-layer name=tdnn5 dim=850 input=Append(-3,0,3)
  # relu-batchnorm-layer name=tdnn6 dim=850
  # output-layer name=output input=tdnn6 dim=$num_targets max-change=1.5

* def xconfig_to_configs():
    args = get_args()
    # 备份
    backup_xconfig_file(args.xconfig_file, args.config_dir)

    existing_layers = []
    if args.existing_model is not None:
        existing_layers = xparser.get_model_component_info(args.existing_model)

    # 通过read_xconfig_file() 生成对应的xlayers
    all_layers = xparser.read_xconfig_file(args.xconfig_file, existing_layers)


    write_expanded_xconfig_files(args.config_dir, all_layers)
    write_config_files(args.config_dir, all_layers)
    check_model_contexts(args.config_dir, args.nnet_edits,
                         existing_model=args.existing_model)
    add_nnet_context_info(args.config_dir, args.nnet_edits,
                          existing_model=args.existing_model)



** def read_xconfig_file(xconfig_filename, existing_layers=[]):
    f = open(xconfig_filename, 'r')
    all_layers = []

    while True:
        line = f.readline()
        if line == '':
            break

        # 通过解析每行, 得到 xlayer对象.
        this_layer = xconfig_line_to_object(line, existing_layers)

        if this_layer is None:
            continue  # line was blank after removing comments.
        all_layers.append(this_layer)
        existing_layers.append(this_layer)
        
    f.close()
    return all_layers





** config_to_layer = {
        'input' : xlayers.XconfigInputLayer,
        'output' : xlayers.XconfigTrivialOutputLayer,
        'output-layer' : xlayers.XconfigOutputLayer,
        'relu-layer' : xlayers.XconfigBasicLayer,
        'relu-renorm-layer' : xlayers.XconfigBasicLayer,
        'relu-batchnorm-dropout-layer' : xlayers.XconfigBasicLayer,
        'relu-dropout-layer': xlayers.XconfigBasicLayer,
        'relu-batchnorm-layer' : xlayers.XconfigBasicLayer,
        'relu-batchnorm-so-layer' : xlayers.XconfigBasicLayer,
        'batchnorm-so-relu-layer' : xlayers.XconfigBasicLayer,
        'sigmoid-layer' : xlayers.XconfigBasicLayer,
        'tanh-layer' : xlayers.XconfigBasicLayer,
        'fixed-affine-layer' : xlayers.XconfigFixedAffineLayer,
        'idct-layer' : xlayers.XconfigIdctLayer,
        'affine-layer' : xlayers.XconfigAffineLayer,
        'lstm-layer' : xlayers.XconfigLstmLayer,
        'lstmp-layer' : xlayers.XconfigLstmpLayer,
        'fast-lstm-layer' : xlayers.XconfigFastLstmLayer,
        'fast-lstmp-layer' : xlayers.XconfigFastLstmpLayer,
        'fast-lstmb-layer' : xlayers.XconfigFastLstmbLayer,
        'stats-layer': xlayers.XconfigStatsLayer,
        'relu-conv-layer': xlayers.XconfigConvLayer,
        'conv-layer': xlayers.XconfigConvLayer,
        'conv-relu-layer': xlayers.XconfigConvLayer,
        'conv-renorm-layer': xlayers.XconfigConvLayer,
        'relu-conv-renorm-layer': xlayers.XconfigConvLayer,
        'batchnorm-conv-layer': xlayers.XconfigConvLayer,
        'conv-relu-renorm-layer': xlayers.XconfigConvLayer,
        'batchnorm-conv-relu-layer': xlayers.XconfigConvLayer,
        'relu-batchnorm-conv-layer': xlayers.XconfigConvLayer,
        'relu-batchnorm-noconv-layer': xlayers.XconfigConvLayer,
        'relu-noconv-layer': xlayers.XconfigConvLayer,
        'conv-relu-batchnorm-layer': xlayers.XconfigConvLayer,
        'conv-relu-batchnorm-so-layer': xlayers.XconfigConvLayer,
        'conv-relu-batchnorm-dropout-layer': xlayers.XconfigConvLayer,
        'conv-relu-dropout-layer': xlayers.XconfigConvLayer,
        'res-block': xlayers.XconfigResBlock,
        'res2-block': xlayers.XconfigRes2Block,
        'channel-average-layer': xlayers.ChannelAverageLayer,
        'attention-renorm-layer': xlayers.XconfigAttentionLayer,
        'attention-relu-renorm-layer': xlayers.XconfigAttentionLayer,
        'attention-relu-batchnorm-layer': xlayers.XconfigAttentionLayer,
        'relu-renorm-attention-layer': xlayers.XconfigAttentionLayer,
        'gru-layer' : xlayers.XconfigGruLayer,
        'pgru-layer' : xlayers.XconfigPgruLayer,
        'opgru-layer' : xlayers.XconfigOpgruLayer,
        'norm-pgru-layer' : xlayers.XconfigNormPgruLayer,
        'norm-opgru-layer' : xlayers.XconfigNormOpgruLayer,
        'renorm-component': xlayers.XconfigRenormComponent
}


# /nwork/svn/ai/sr/kaldi/egs/aishell/s5/steps/libs/nnet3/xconfig/parser.py


** def xconfig_line_to_object(config_line, prev_layers = None):
   
    x  = xutils.parse_config_line(config_line)
    if x is None:
        return None
    (first_token, key_to_value) = x
    # 数组中找到对应的 xlayer对象 并根据first_token, key_to_value 构造
    return config_to_layer[first_token](first_token, key_to_value, prev_layers)


*** def parse_config_line(orig_config_line):
# fixed-affine-layer name=lda input=Append(-2,-1,0,1,2,ReplaceIndex(ivector, t, 0)) affine-transform-file=nan-test/configs/lda.mat
# ('fixed-affine-layer', {'affine-transform-file': 'nan-test/configs/lda.mat', 'input': 'Append(-2,-1,0,1,2,ReplaceIndex(ivector,t,0 )', 'name': 'lda'})

    # Remove comments.
    # note: splitting on '#' will always give at least one field...  python
    # treats splitting on space as a special case that may give zero fields.
    config_line = orig_config_line.split('#')[0]

    # Note: this set of allowed characters may have to be expanded in future.
    # 在未来必须能够扩展使用. 如下都是禁用 char
    x = re.search('[^a-zA-Z0-9\.\-\(\)@_=,/+:\s"]', config_line)
    if x is not None:
        bad_char = x.group(0)
        if bad_char == "'":
            raise RuntimeError("Xconfig line has disallowed character ' (use "
                               "double quotes for strings containing = signs)")
        else:
            raise RuntimeError("Xconfig line has disallowed character: {0}"
                               .format(bad_char))


    # relu-batchnorm-layer name=tdnn2 dim=850 input=Append(-1,0,2)
    # first_token          key-value  key-value key-value
    # now split on space; later we may splice things back together.
    fields=config_line.split()
    if len(fields) == 0:
        return None   # Line was only whitespace after removing comments.

    # 获得first_token
    first_token = fields[0]

    # 获得剩下的 key-values
    # get rid of the first field which we put in 'first_token'.
    fields = fields[1:]

    # "key-value key-value key-value"
    rest_of_line = ' '.join(fields)


    # 找到所有key-value '"' 的 postions
    # 但是正常不会是 'a=1 b=3 " x=1 y=2 " c=Append( i1, i2)' 这样的格式, 应该是 以空格分割的如下形式
    # name=lda input=Append(-2,-1,0,1,2,ReplaceIndex(ivector, t, 0)) affine-transform-file=nan-test/configs/lda.mat

    # rest of the line can be of the form 'a=1 b=3 " x=1 y=2 " c=Append( i1, i2)'
    positions = map(lambda x: x.start(), re.finditer('"', rest_of_line))
    if not len(positions) % 2 == 0:
        raise RuntimeError("Double-quotes should occur in pairs")

    # 去掉所有key-value中的'='
    # Replace all the equals signs inside the "-enclosed strings
    # with question marks ('?') [this is just an arbitrary character
    # that won't otherwise be present, search above for 'banned'],
    # and replace the quotation marks themselves with spaces.
    # Then later on we'll convert all the question marks to
    # equals signs in the values in the dicts.
    num_strings = len(positions) / 2

    fields = []
    # foreach key-value
    for i in range(num_strings):
        start = positions[i * 2]
        end = positions[i * 2 + 1]

        # 用空格分割 key-value. 并将=用?替换
        line_before_start = rest_of_line[:start]
        inside_quotes=rest_of_line[start+1:end].replace('=', '?')
        line_after_end = rest_of_line[end + 1:]

        # the reason why we include the spaces here, is to keep the length of
        # rest_of_line the same, and the positions in 'positions' valid.
        new_rest_of_line = line_before_start + ' ' + inside_quotes + ' ' + line_after_end
        assert len(new_rest_of_line) == len(rest_of_line)
        rest_of_line = new_rest_of_line

    # 结果 如下:
    # suppose rest_of_line is: 'input=Append(foo, bar) foo=bar'
    # then after the below we'll get
    # fields = ['', 'input', 'Append(foo, bar)', 'foo', 'bar']

    ans_dict = dict()
    other_fields = re.split(r'\s*([-a-zA-Z0-9_]*)=', rest_of_line)

    fields += other_fields[1:]
    num_variables = len(fields) / 2
    for i in range(num_variables):
        var_name = fields[i * 2]
        var_value = fields[i * 2 + 1]

        # Teplace any '?' characters that we inserted above, with the original
        # '=' characters.
        # The 'strip()' is to remove initial and final spaces that we might
        # have inserted while processing double-quotes above (search above
        # for the string 'inside_quotes' to see what is meant by this).
        ans_dict[var_name] = var_value.replace('?', '=').strip()

    # 最终返回 (Affine-layer, {key:value, key2:value2, key3:value3})
    # ('fixed-affine-layer', {'affine-transform-file': 'nan-test/configs/lda.mat', 'input': 'Append(-2,-1,0,1,2,ReplaceIndex(ivector, t, 0))', 'name': 'lda'})
    return (first_token, ans_dict)








** class XconfigLayerBase(object):

    def __init__(self, first_token, key_to_value, all_layers):
        """
         first_token: first token on the xconfig line, e.g. 'affine-layer'.
         key_to_value: dictionary with parameter values
             { 'name':'affine1',
               'input':'Append(0, 1, 2, ReplaceIndex(ivector, t, 0))',
               'dim=1024' }.

        The only required and 'special' values that are dealt with directly at this level, are 'name' and 'input'. 
        The rest are put in self.config and are dealt with by the child classes' init functions.
        all_layers: An array of objects inheriting XconfigLayerBase for all  previously parsed layers.
        """

        # first_token --- get the layer_type
        self.layer_type = first_token
        self.name = key_to_value['name']

        # 允许 all_layer 中的existing部分中的layer 具有在非existing部分中具有一个同名部分.
        # 
        # It is possible to have two layers with a same name in 'all_layer', if
        # the layer type for one of them is 'existing'.
        # Layers of type 'existing' are corresponding to the component-node names
        # in the existing model, which we are adding layers to them.
        # 'existing' layers are not presented in any config file, and new layer
        # with the same name can exist in 'all_layers'.

        # e.g.
        # e.g. It is possible to have 'output-node' with name 'output' in the
        # existing model, which is added to all_layers using layer type 'existing',
        # and 'output-node' of type 'output-layer' with the same name 'output' in
        # 'all_layers'.


        # config 是一个 dict
        self.config = {}

        # overridden
        # the following, which should be overridden in the child class, sets
        # default config parameters in self.config.
        self.set_default_configs()

        # 设置配置值 为具体user class 具体用,然后解析得到具体Descriptors??
        # 不会重新实现
        # The following is not to be reimplemented in child classes;
        # it sets the config values to those specified by the user, and
        # parses any Descriptors.
        self.set_configs(key_to_value, all_layers)

        # 默认配置值, 当某个参数未设置时, 通过其他参数推到出的配置.
        # This method, sets the derived default config values
        # i.e., config values when not specified can be derived from
        # other values. It can be overridden in the child class.
        self.set_derived_configs()

        # overriden
        # the following, which should be overridden in the child class, checks
        # that the config parameters that have been set are reasonable.
        self.check_configs()


    def set_configs(self, key_to_value, all_layers):

        # check 是否一个key 在 this classs 被允许使用的.
        # First check that there are no keys that don't correspond to any config
        # parameter of this layer, and if so, raise an exception with an
        # informative message saying what configs are allowed.
        for key, value in key_to_value.items():
            if key != 'name':
                if key not in self.config:
                    configs = ' '.join([('{0}->"{1}"'.format(x, y) if isinstance(y, str)
                                         else '{0}->{1}'.format(x, y))
                                        for x, y in self.config.items()])
                    raise RuntimeError("Configuration value {0}={1} was not "
                                       "expected in layer of type {2}; allowed "
                                       "configs with their defaults: {3}"
                                       "" .format(key, value, self.layer_type, configs))

        # 设置------------------ self.config[key]
        # foreach key-value 然后设置 config[key]
        for key, value in key_to_value.items():
            if key != 'name':
                # config dict 保存对应的 key的value值 (type 获得对应类型)
                self.config[key] = xutils.convert_value_to_type(key,
                                                                type(self.config[key]),
                                                                value)
        # descriptors 构造一个dict 对象
        self.descriptors = dict()
        self.descriptor_dims = dict()

        # -------------------------- 根据不同type layer 对可能的descriptor生成对应的Descriptor对象.
        # 处理Descriptor  final string form??
        # get_input_descriptor_names() 会被重写, 对不同的type layer 具有不同可能的descriptors.
        # Parse Descriptors and get their dims and their 'final' string form.
        # in self.descriptors[key]
        for key in self.get_input_descriptor_names():
            descriptor_string = self.config[key]  # input string.
           
            # 转化为 descriptor. 获得对应的 dim
            desc = self.convert_to_descriptor(descriptor_string, all_layers)
            desc_dim = self.get_dim_for_descriptor(desc, all_layers)
            desc_norm_str = desc.str()

            # desc_output_str contains the "final" component names, those that
            # appear in the actual config file (i.e. not names like
            # 'layer.auxiliary_output'); that's how it differs from desc_norm_str.
            # Note: it's possible that the two strings might be the same in
            # many, even most, cases-- it depends whether
            # output_name(self, auxiliary_output)
            # returns self.get_name() + '.' + auxiliary_output
            # when auxiliary_output is not None.
            # That's up to the designer of the layer type.
            desc_output_str = self.get_string_for_descriptor(desc, all_layers)

            # 构建 descriptor 并加入 self.descriptors 是一个dict 对不同可能的key 具有不同的Descriptor_list.
            # eg input 具有 Append(Offset, Offset, Offset) + ReplaceIndex(Offset, Offset)
            # 很可能不止input 还有很多其他的key.
            self.descriptors[key] = {'string': desc,
                                     'normalized-string': desc_norm_str,
                                     'final-string': desc_output_str,
                                     'dim': desc_dim}


    # 正则化 descriptor 
    def normalize_descriptors(self):
        # 将self.config(对应就是descriptors) 中 配置变量 转化为normalized形式.
        # 通过按Descriptor处理,替换[-1]为实际的layername,重新生成为string
        # 实际就是将所有的Descriptor 变回config形式?
        """Converts any config variables in self.config which correspond to
        Descriptors, into a 'normalized form' derived from parsing them as
        Descriptors, replacing things like [-1] with the actual layer names,
        and regenerating them as strings.  We stored this when the object was
        initialized, in self.descriptors; this function just copies them back
        to the config.
        """

        for key, desc_str_dict in self.descriptors.items():
            self.config[key] = desc_str_dict['normalized-string']
            
    # ================== important ===============
    def convert_to_descriptor(self, descriptor_string, all_layers):
        # 应该从child class调用, 将对应为一个descriptor的string 转化为一个 Descriptor对象
        """Convenience function intended to be called from child classes,
        converts a string representing a descriptor ('descriptor_string')
        into an object of type Descriptor, and returns it. 
        """
        # 需要self 和 all_layers --- 是list of objects of type xconfigLayerBase.
        # 所以能够计算出 多个 其他layers的name 和 dim
    
        """
        It needs 'self' and
        'all_layers' (where 'all_layers' is a list of objects of type
        XconfigLayerBase) so that it can work out a list of the names of other
        layers, and get dimensions from them.
        """
        
        # 先前layer的name []
        prev_names = xutils.get_prev_names(all_layers, self)
        # tokenize_descriptor--, 并将其中 -1 -2 等用 last1 last2 的 layer-name替换.
# 82| >>> utils.tokenize_descriptor("Append(-2,-1,0,1,2,ReplaceIndex(ivector, t, 0))")                                                    
# 83| ['Append', '(', '-2', ',', '-1', ',', '0', ',', '1', ',', '2', ',', 'ReplaceIndex', '(', 'ivector', ',', 't', ',', '0', ')', ')', ' 
# 84| end of string'] 
        tokens = xutils.tokenize_descriptor(descriptor_string, prev_names)
        # 从0 开始处理每个descriptor.
        pos = 0
        (descriptor, pos) = xutils.parse_new_descriptor(tokens, pos, prev_names)

        return descriptor



    def get_dim_for_descriptor(self, descriptor, all_layers):

        layer_to_dim_func = \
                lambda name: xutils.get_dim_from_layer_name(all_layers, self,
                                                            name)
        return descriptor.dim(layer_to_dim_func)

    def get_string_for_descriptor(self, descriptor, all_layers):
        """Returns the 'final' string form of a Descriptor object,
        as could be used in config files. This is a convenience function
        provided for use in child classes;
        """

        layer_to_string_func = \
                lambda name: xutils.get_string_from_layer_name(all_layers,
                                                               self, name)
        return descriptor.config_string(layer_to_string_func)

**** other
    def set_derived_configs(self):
        """This is expected to be called after set_configs and before
        check_configs().
        """
        if 'dim' in self.config and self.config['dim'] <= 0:
            self.config['dim'] = self.descriptors['input']['dim']

    def check_configs(self):
        """child classes should override this.
        """

        pass

    def get_input_descriptor_names(self):
        """This function, which may be (but usually will not have to be)
        overridden by child classes, returns a list of names of the input
        descriptors expected by this component. Typically this would just
        return ['input'] as most layers just have one 'input'. However some
        layers might require more inputs (e.g. cell state of previous LSTM layer
        in Highway LSTMs). It is used in the function 'normalize_descriptors()'.
        This implementation will work for layer types whose only
        Descriptor-valued config is 'input'.
        If a child class adds more inputs, or does not have an input
        (e.g. the XconfigInputLayer), it should override this function's
        implementation to something like: `return ['input', 'input2']`
        """

        return ['input']

    def auxiliary_outputs(self):
        """Returns a list of all auxiliary outputs that this layer supports.
        These are either 'None' for the regular output, or a string
        (e.g. 'projection' or 'memory_cell') for any auxiliary outputs that
        the layer might provide.  Most layer types will not need to override
        this.
        """

        return [None]

    def output_name(self, auxiliary_output=None):
        """Called with auxiliary_output is None, this returns the component-node
        name of the principal output of the layer (or if you prefer, the text
        form of a descriptor that gives you such an output; such as
        Append(some_node, some_other_node)).
        The 'auxiliary_output' argument is a text value that is designed for
        extensions to layers that have additional auxiliary outputs.
        For example, to implement a highway LSTM you need the memory-cell of a
        layer, so you might allow auxiliary_output='memory_cell' for such a
        layer type, and it would return the component node or a suitable
        Descriptor: something like 'lstm3.c_t'
        """

        raise Exception("Child classes must override output_name()")

    def output_dim(self, auxiliary_output=None):
        """The dimension that this layer outputs.  The 'auxiliary_output'
        parameter is for layer types which support auxiliary outputs.
        """

        raise Exception("Child classes must override output_dim()")

    def get_full_config(self):
        """This function returns lines destined for the 'full' config format, as
        would be read by the C++ programs. Since the program
        xconfig_to_configs.py writes several config files, this function returns
        a list of pairs of the form (config_file_basename, line),
        e.g. something like
         [  ('init', 'input-node name=input dim=40'),
            ('ref', 'input-node name=input dim=40') ]
        which would be written to config_dir/init.config and config_dir/ref.config.
        """

        raise Exception("Child classes must override get_full_config()")

    # 反向 生成会string??? 但是 会有扩展
    def str(self):
        """Converts 'this' to a string which could be printed to
        an xconfig file; in xconfig_to_configs.py we actually expand all the
        lines to strings and write it as xconfig.expanded as a reference
        (so users can see any defaults).
        """
        # affine-layer name=affine1
        list_of_entries = ['{0} name={1}'.format(self.layer_type, self.name)]
        # all configs.
        for key, value in sorted(self.config.items()):
            if isinstance(value, str) and re.search('=', value):
                # the value is a string that contains an '=' sign, so we need to
                # enclose it in double-quotes, otherwise we woudldn't be able to
                # parse from that output.
                if re.search('"', value):
                    print("Warning: config '{0}={1}' contains both double-quotes "
                          "and equals sign; it will not be possible to parse it "
                          "from the file.".format(key, value), file=sys.stderr)
                list_of_entries.append('{0}="{1}"'.format(key, value))
            else:
                # add the key=value
                list_of_entries.append('{0}={1}'.format(key, value))

        return ' '.join(list_of_entries)

    def __str__(self):
        return self.str()
        

** class XconfigInputLayer(XconfigLayerBase):
   # /nwork/svn/ai/sr/kaldi/egs/aishell/s5/steps/libs/nnet3/xconfig/basic_layers.py
    def __init__(self, first_token, key_to_value, prev_names=None):
        assert first_token == 'input'
        XconfigLayerBase.__init__(self, first_token, key_to_value, prev_names
    
    def set_default_configs(self):
        self.config = {'dim': -1}







# first_token: first token on the xconfig line, e.g. 'affine-layer'.
# key_to_value: dictionary with parameter values
#     { 'name':'affine1',
#       'input':'Append(0, 1, 2, ReplaceIndex(ivector, t, 0))',
#       'dim=1024' }.

** class XconfigFixedAffineLayer(XconfigLayerBase):

   # 构造时, 在构建config 中构建Descriptor时, 会get_input_descriptor_names(),会默认是用baselayer的返回值
   # 只具有input= 这个Descriptor.
   # 具体构建Descriptor的过程在 BaseLayer中
    """
    This class is for lines like
     'fixed-affine-layer name=lda input=Append(-2,-1,0,1,2,ReplaceIndex(ivector, t, 0)) affine-transform-file=foo/bar/lda.mat'

    The output dimension of the layer may be specified via 'dim=xxx', but if not specified,
    the dimension defaults to the same as the input.  
    ????
    Note: we don't attempt to read that
    file at the time the config is created, because in the recipes, that file is created
    after the config files.

    See other configuration values below.

    Parameters of the class, and their defaults:
      input='[-1]'             [Descriptor giving the input of the layer.]
      dim=None                   [Output dimension of layer; defaults to the same as the input dim.]
      affine-transform-file='' [Must be specified.]
      delay=0                  [Optional delay for the output-node in init.config]
    """


    def __init__(self, first_token, key_to_value, prev_names=None):
        assert first_token == 'fixed-affine-layer'
        XconfigLayerBase.__init__(self, first_token, key_to_value, prev_names)

    def set_default_configs(self):
        # note: self.config['input'] is a descriptor, '[-1]' means output
        # the most recent layer.
        self.config = {'input': '[-1]',
                       'dim': -1,
                       'affine-transform-file': '',
                       'delay': 0,
                       'write-init-config': True}





** others
*** def parse_new_descriptor(tokens, pos, prev_names):
     # Append(-2,-1,0,1,2,ReplaceIndex(ivector, t, 0))
     # [ 'Append', '(',  '-1', ',', '0', ',', '1','ReplaceINdex','(','ivector','t','0',')', ')']
     # Des -- operator -----  Append
     #        items -append-  Des  ----  operator - Offset
     #                                   items   - Des --- operator - None       +  -1.
     #                                                     items   - preLayer
     #        items -append-  Des  ----  operator - Offset
     #                                   items   - Des --- operator - None       +  0.
     #                                                     items   - preLayer
     #        items -append-  Des  ----  operator - Offset
     #                                   items   - Des --- operator - None       + 1.
     #                                                     items   - preLayer
     #        items -append-  Des  ----  operator - ReplaceIndex
     #                                   items   -append- 
     size = len(tokens)
     first_token = tokens[pos]

     pos += 1
     # 申请Descriptor 对象
     d = Descriptor()

     # 这个if判断是否是个正常的descriptor, 
     if first_token in [ 'Offset', 'Round', 'ReplaceIndex', 'Append', 'Sum', 'Switch', 'Failover', 'IfDefined' ]:
         # check
         expect_token('(', tokens[pos], first_token + '()')
         pos += 1

         d.operator = first_token
         (desc, pos) = parse_new_descriptor(tokens, pos, prev_names)
         d.items = [desc]

         # ------------------------
         # if-else 根据不同的descriptor-str进行不同的Descriptor生成
         if first_token == 'Offset':

         elif first_token in [ 'Append', 'Sum', 'Switch', 'Failover', 'IfDefined' ]:
             # 循环处理
             while True:
                 if tokens[pos] == ')':
                     # check num-items is correct for some special cases.
                     if first_token == 'Failover' and len(d.items) != 2:
                         raise RuntimeError("Parsing Failover(), expected 2 items but got {0}".format(len(d.items)))
                     if first_token == 'IfDefined' and len(d.items) != 1:
                         raise RuntimeError("Parsing IfDefined(), expected 1 item but got {0}".format(len(d.items)))
                     pos += 1
                     break
                 elif tokens[pos] == ',':
                     pos += 1  # consume the comma.
                 else:
                     raise RuntimeError("Parsing Append(), expected ')' or ',', got " + tokens[pos])

                  # ==================================
                  # 循环构建内部的 offset-Descriptor.
                 (desc, pos) = parse_new_descriptor(tokens, pos, prev_names)
                 d.items.append(desc)

         elif first_token == 'Round':

         elif first_token == 'ReplaceIndex':
             # 类似Assert .
             expect_token(',', tokens[pos], 'ReplaceIndex()')
             pos += 1

             if tokens[pos] in [ 'x', 't' ]:
                 d.items.append(tokens[pos])
                 pos += 1
             else:
                 raise RuntimeError("Parsing ReplaceIndex(), expected 'x' or 't', got " +
                                 tokens[pos])
             expect_token(',', tokens[pos], 'ReplaceIndex()')
             pos += 1
             try:
                 new_value = int(tokens[pos])
                 pos += 1
                 d.items.append(new_value)
             except:
                 raise RuntimeError("Parsing Offset(), expected integer, got " + tokens[pos])
                 
             expect_token(')', tokens[pos], 'ReplaceIndex()')
             pos += 1

         else:
             raise RuntimeError("code error")

     # 非正常的Descriptor, 需要 生成对应的别的Descriptor对象.
     else:
         # the last possible case is that 'first_token' is just an integer i,
         # which can appear in things like Append(-3, 0, 3).
         # See if the token is an integer.
         # In this case, it's interpreted as the name of previous layer
         # (with that time offset applied).
         offset_t = int(first_token)

         assert isinstance(prev_names, list)

         d.operator = None
         # the layer name is the name of the most recent layer.
         d.items = [prev_names[-1]]
         
         if offset_t != 0:
             inner_d = d
             d = Descriptor()
             d.operator = 'Offset'
             d.items = [ inner_d, offset_t ]

     return (d, pos)
     
